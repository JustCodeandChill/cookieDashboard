{"ast":null,"code":"export default(function(){return Math.floor(Math.random()*100);});export var generateRandomNumberArray=function generateRandomNumberArray(size){var range=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1000;if(size<0)return new Error(\"invalid size\");if(size===1)return Math.floor(Math.random()*range);else{var randomNumberArray=[];for(var i=0;i<size;i++){randomNumberArray.push(Math.floor(Math.random()*range));}return randomNumberArray;}};export var generateRandomPercentageNumberArray=function generateRandomPercentageNumberArray(size){if(size<0)return new Error(\"invalid size\");if(size===1)return 100;else{var randomPercentageNumberArray=[];var randomPercentageNumber;var left=100;while(randomPercentageNumberArray.length<size){randomPercentageNumber=Math.floor(Math.random()*left);if(randomPercentageNumber>left)return new Error(\"calculation wrong\");randomPercentageNumberArray.push(randomPercentageNumber);left-=randomPercentageNumber;if(randomPercentageNumberArray.length===size-1){randomPercentageNumberArray.push(Math.round(left));break;}}return randomPercentageNumberArray;}};export var generateRandomKPI=function generateRandomKPI(){var range=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;var total,completed=0;total=Math.round(Math.random()*range);completed=Math.round(Math.random()*range);while(completed>total){completed=Math.round(Math.random()*range);}return{total:total,completed:completed};};","map":{"version":3,"sources":["/home/alexkimory/react-dashboard/client/src/utils/generateRandomNumber.js"],"names":["Math","floor","random","generateRandomNumberArray","size","range","Error","randomNumberArray","i","push","generateRandomPercentageNumberArray","randomPercentageNumberArray","randomPercentageNumber","left","length","round","generateRandomKPI","total","completed"],"mappings":"AAAA,eAAe,UAAM,CACnB,MAAOA,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,GAA3B,CAAP,CACD,CAFD,EAIA,MAAO,IAAMC,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACC,IAAD,CAAwB,IAAjBC,CAAAA,KAAiB,2DAAT,IAAS,CAC/D,GAAID,IAAI,CAAG,CAAX,CAAc,MAAO,IAAIE,CAAAA,KAAJ,CAAU,cAAV,CAAP,CACd,GAAIF,IAAI,GAAK,CAAb,CAAgB,MAAOJ,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBG,KAA3B,CAAP,CAAhB,IACK,CACH,GAAME,CAAAA,iBAAiB,CAAG,EAA1B,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,IAApB,CAA0BI,CAAC,EAA3B,EACED,iBAAiB,CAACE,IAAlB,CAAuBT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBG,KAA3B,CAAvB,EADF,CAEA,MAAOE,CAAAA,iBAAP,CACD,CACF,CATM,CAWP,MAAO,IAAMG,CAAAA,mCAAmC,CAAG,QAAtCA,CAAAA,mCAAsC,CAACN,IAAD,CAAU,CAC3D,GAAIA,IAAI,CAAG,CAAX,CAAc,MAAO,IAAIE,CAAAA,KAAJ,CAAU,cAAV,CAAP,CACd,GAAIF,IAAI,GAAK,CAAb,CAAgB,MAAO,IAAP,CAAhB,IACK,CACH,GAAMO,CAAAA,2BAA2B,CAAG,EAApC,CACA,GAAIC,CAAAA,sBAAJ,CACA,GAAIC,CAAAA,IAAI,CAAG,GAAX,CACA,MAAOF,2BAA2B,CAACG,MAA5B,CAAqCV,IAA5C,CAAkD,CAChDQ,sBAAsB,CAAGZ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgBW,IAA3B,CAAzB,CAEA,GAAID,sBAAsB,CAAGC,IAA7B,CAAmC,MAAO,IAAIP,CAAAA,KAAJ,CAAU,mBAAV,CAAP,CACnCK,2BAA2B,CAACF,IAA5B,CAAiCG,sBAAjC,EACAC,IAAI,EAAID,sBAAR,CAEA,GAAID,2BAA2B,CAACG,MAA5B,GAAuCV,IAAI,CAAG,CAAlD,CAAqD,CACnDO,2BAA2B,CAACF,IAA5B,CAAiCT,IAAI,CAACe,KAAL,CAAWF,IAAX,CAAjC,EACA,MACD,CACF,CAED,MAAOF,CAAAA,2BAAP,CACD,CACF,CAtBM,CAwBP,MAAO,IAAMK,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAiB,IAAhBX,CAAAA,KAAgB,2DAAR,GAAQ,CAChD,GAAIY,CAAAA,KAAJ,CACEC,SAAS,CAAG,CADd,CAEAD,KAAK,CAAGjB,IAAI,CAACe,KAAL,CAAWf,IAAI,CAACE,MAAL,GAAgBG,KAA3B,CAAR,CACAa,SAAS,CAAGlB,IAAI,CAACe,KAAL,CAAWf,IAAI,CAACE,MAAL,GAAgBG,KAA3B,CAAZ,CAEA,MAAOa,SAAS,CAAGD,KAAnB,CAA0B,CACxBC,SAAS,CAAGlB,IAAI,CAACe,KAAL,CAAWf,IAAI,CAACE,MAAL,GAAgBG,KAA3B,CAAZ,CACD,CACD,MAAO,CACLY,KAAK,CAALA,KADK,CAELC,SAAS,CAATA,SAFK,CAAP,CAID,CAbM","sourcesContent":["export default () => {\n  return Math.floor(Math.random() * 100);\n};\n\nexport const generateRandomNumberArray = (size, range = 1000) => {\n  if (size < 0) return new Error(\"invalid size\");\n  if (size === 1) return Math.floor(Math.random() * range);\n  else {\n    const randomNumberArray = [];\n    for (let i = 0; i < size; i++)\n      randomNumberArray.push(Math.floor(Math.random() * range));\n    return randomNumberArray;\n  }\n};\n\nexport const generateRandomPercentageNumberArray = (size) => {\n  if (size < 0) return new Error(\"invalid size\");\n  if (size === 1) return 100;\n  else {\n    const randomPercentageNumberArray = [];\n    let randomPercentageNumber;\n    let left = 100;\n    while (randomPercentageNumberArray.length < size) {\n      randomPercentageNumber = Math.floor(Math.random() * left);\n\n      if (randomPercentageNumber > left) return new Error(\"calculation wrong\");\n      randomPercentageNumberArray.push(randomPercentageNumber);\n      left -= randomPercentageNumber;\n\n      if (randomPercentageNumberArray.length === size - 1) {\n        randomPercentageNumberArray.push(Math.round(left));\n        break;\n      }\n    }\n\n    return randomPercentageNumberArray;\n  }\n};\n\nexport const generateRandomKPI = (range = 100) => {\n  let total,\n    completed = 0;\n  total = Math.round(Math.random() * range);\n  completed = Math.round(Math.random() * range);\n\n  while (completed > total) {\n    completed = Math.round(Math.random() * range);\n  }\n  return {\n    total,\n    completed\n  }\n};\n"]},"metadata":{},"sourceType":"module"}