{"ast":null,"code":"var _jsxFileName = \"/home/alexkimory/react-test/src/components/section/charts/TimeSerie.js\";\nimport React from \"react\";\nimport { Chart } from \"chart.js\";\nimport generateCurrentTime from '../../../utils/generateCurrentTime';\nconst TIME_REPEAT = 5;\n\nclass TimeSerie extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n    this.state = {\n      data: [],\n      labels: []\n    };\n\n    this.updateTimeSerieEveryXSeconds = second => {\n      setInterval(() => {\n        let newData = Math.floor(Math.random() * 100);\n        let newDatArray = [...this.state.data, newData];\n        this.setState({\n          data: newDatArray\n        }); //update x axis with current time hour:minute:second\n\n        this.setState({\n          labels: [...this.state.labels, generateCurrentTime()]\n        }); //create chart and update it every X seconds\n\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n            //Bring in data\n            labels: this.state.labels,\n            datasets: [{\n              borderColor: \"red\",\n              showLine: true,\n              fill: false,\n              label: \"Customer in store\",\n              data: this.state.data\n            }]\n          },\n          options: {\n            scales: {\n              yAxes: [{\n                stacked: true,\n                ticks: {\n                  suggestedMin: 0,\n                  suggestedMax: 100,\n                  maxTicksLimit: 5,\n                  beginAtZero: true,\n                  stepSize: 0.5\n                }\n              }],\n              xAxes: []\n            }\n          }\n        });\n      }, second * 1000);\n    };\n  }\n\n  componentDidMount() {\n    this.updateTimeSerieEveryXSeconds(TIME_REPEAT);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"Number of customer in store every \", TIME_REPEAT, \" seconds\"), /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default TimeSerie;","map":{"version":3,"sources":["/home/alexkimory/react-test/src/components/section/charts/TimeSerie.js"],"names":["React","Chart","generateCurrentTime","TIME_REPEAT","TimeSerie","Component","chartRef","createRef","state","data","labels","updateTimeSerieEveryXSeconds","second","setInterval","newData","Math","floor","random","newDatArray","setState","myChartRef","current","getContext","type","datasets","borderColor","showLine","fill","label","options","scales","yAxes","stacked","ticks","suggestedMin","suggestedMax","maxTicksLimit","beginAtZero","stepSize","xAxes","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AAEA,MAAMC,WAAW,GAAG,CAApB;;AACA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,QADsC,GAC3BN,KAAK,CAACO,SAAN,EAD2B;AAAA,SAEtCC,KAFsC,GAE9B;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,MAAM,EAAE;AAFF,KAF8B;;AAAA,SAUtCC,4BAVsC,GAUNC,MAAD,IAAY;AACzCC,MAAAA,WAAW,CAAC,MAAM;AAChB,YAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAd;AACA,YAAIC,WAAW,GAAG,CAAC,GAAG,KAAKV,KAAL,CAAWC,IAAf,EAAqBK,OAArB,CAAlB;AACA,aAAKK,QAAL,CAAc;AAAEV,UAAAA,IAAI,EAAES;AAAR,SAAd,EAHgB,CAIlB;;AACE,aAAKC,QAAL,CAAc;AAAET,UAAAA,MAAM,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,MAAf,EAAuBR,mBAAmB,EAA1C;AAAV,SAAd,EALgB,CAOlB;;AACE,cAAMkB,UAAU,GAAG,KAAKd,QAAL,CAAce,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,YAAIrB,KAAJ,CAAUmB,UAAV,EAAsB;AACpBG,UAAAA,IAAI,EAAE,MADc;AAEpBd,UAAAA,IAAI,EAAE;AACJ;AACAC,YAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAFf;AAGJc,YAAAA,QAAQ,EAAE,CACR;AACEC,cAAAA,WAAW,EAAE,KADf;AAEEC,cAAAA,QAAQ,EAAE,IAFZ;AAGEC,cAAAA,IAAI,EAAE,KAHR;AAIEC,cAAAA,KAAK,EAAE,mBAJT;AAKEnB,cAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AALnB,aADQ;AAHN,WAFc;AAepBoB,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE;AACNC,cAAAA,KAAK,EAAE,CACL;AACEC,gBAAAA,OAAO,EAAE,IADX;AAEEC,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,YAAY,EAAE,CADT;AAELC,kBAAAA,YAAY,EAAE,GAFT;AAGLC,kBAAAA,aAAa,EAAE,CAHV;AAILC,kBAAAA,WAAW,EAAE,IAJR;AAKLC,kBAAAA,QAAQ,EAAE;AALL;AAFT,eADK,CADD;AAaNC,cAAAA,KAAK,EAAE;AAbD;AADD;AAfW,SAAtB;AAiCD,OA3CU,EA2CR3B,MAAM,GAAC,IA3CC,CAAX;AA4CD,KAvDqC;AAAA;;AAMtC4B,EAAAA,iBAAiB,GAAG;AAClB,SAAK7B,4BAAL,CAAkCR,WAAlC;AACD;;AAiDDsC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAuCtC,WAAvC,aADJ,eAEE;AAAQ,MAAA,EAAE,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAE,KAAKG,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAhEqC;;AAmExC,eAAeF,SAAf","sourcesContent":["import React from \"react\";\nimport { Chart } from \"chart.js\";\nimport generateCurrentTime from '../../../utils/generateCurrentTime';\n\nconst TIME_REPEAT = 5;\nclass TimeSerie extends React.Component {\n  chartRef = React.createRef();\n  state = {\n    data: [],\n    labels: [],\n  };\n  componentDidMount() {\n    this.updateTimeSerieEveryXSeconds(TIME_REPEAT);\n  }\n\n  updateTimeSerieEveryXSeconds = (second) => {\n    setInterval(() => {\n      let newData = Math.floor(Math.random() * 100);\n      let newDatArray = [...this.state.data, newData];\n      this.setState({ data: newDatArray });\n    //update x axis with current time hour:minute:second\n      this.setState({ labels: [...this.state.labels, generateCurrentTime()] });\n\n    //create chart and update it every X seconds\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          //Bring in data\n          labels: this.state.labels,\n          datasets: [\n            {\n              borderColor: \"red\",\n              showLine: true,\n              fill: false,\n              label: \"Customer in store\",\n              data: this.state.data,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            yAxes: [\n              {\n                stacked: true,\n                ticks: {\n                  suggestedMin: 0,\n                  suggestedMax: 100,\n                  maxTicksLimit: 5,\n                  beginAtZero: true,\n                  stepSize: 0.5,\n                },\n              },\n            ],\n            xAxes: [],\n          },\n        },\n      });\n    }, second*1000);\n  };\n\n  render() {\n    return (\n      <div>\n          <h5>Number of customer in store every {TIME_REPEAT} seconds</h5>\n        <canvas id=\"myChart\" ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n\nexport default TimeSerie;\n"]},"metadata":{},"sourceType":"module"}