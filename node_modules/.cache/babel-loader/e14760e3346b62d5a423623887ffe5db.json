{"ast":null,"code":"var _jsxFileName = \"/home/alexkimory/react-test/src/components/section/charts/BarChart.js\";\nimport React from \"react\";\nimport { Chart } from \"chart.js\";\nimport generateYearArray from \"../../../utils/generateYearArray\";\nimport { generateRandomNumberArray, generateRandomPercentageNumberArray } from \"../../../utils/generateRandomNumber\";\nconst SIZE = 5;\n\nclass BarChart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.componentDidMount = () => {\n      this.props.horizontal ? this.renderHorizontalChart() : this.renderChart();\n    };\n\n    this.renderHorizontalChart = () => {\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n        type: \"horizontalBar\",\n        data: {\n          labels: [\"5 stars\", \"4 stars\", \"3 stars\", \"2 stars\", \"1 star\"],\n          datasets: [{\n            label: \"Percentage (%)\",\n            backgroundColor: [\"#fecd51\", \"#8e5ea2\", \"#3cba9f\", \"#e8c3b9\", \"#ff5200\"],\n            data: generateRandomPercentageNumberArray(5)\n          }]\n        },\n        options: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: true,\n            text: this.props.chartTitle\n          }\n        }\n      }); // this.chartRef.current.style.backgroundColor = '#b5ead7'\n    };\n\n    this.renderChart = () => {\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n        type: \"bar\",\n        data: {\n          labels: generateYearArray(SIZE),\n          datasets: [{\n            label: \"dollar (thousand)\",\n            backgroundColor: [\"#3e95cd\", \"#8e5ea2\", \"#3cba9f\", \"#e8c3b9\", \"#c45850\"],\n            data: generateRandomNumberArray(SIZE, 1000)\n          }]\n        },\n        options: {\n          legend: {\n            display: false\n          },\n          title: {\n            display: true,\n            text: this.props.chartTitle\n          },\n          scales: {\n            xAxes: [{\n              gridLines: {\n                offsetGridLines: true\n              }\n            }]\n          }\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: \"15px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, this.props.text), /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"gray-background round-radius\",\n      style: {\n        paddingBottom: \"15px\"\n      },\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/home/alexkimory/react-test/src/components/section/charts/BarChart.js"],"names":["React","Chart","generateYearArray","generateRandomNumberArray","generateRandomPercentageNumberArray","SIZE","BarChart","Component","chartRef","createRef","componentDidMount","props","horizontal","renderHorizontalChart","renderChart","myChartRef","current","getContext","type","data","labels","datasets","label","backgroundColor","options","legend","display","title","text","chartTitle","scales","xAxes","gridLines","offsetGridLines","render","marginTop","paddingBottom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Chart } from \"chart.js\";\nimport generateYearArray from \"../../../utils/generateYearArray\";\nimport { generateRandomNumberArray, generateRandomPercentageNumberArray } from \"../../../utils/generateRandomNumber\";\nconst SIZE = 5;\nclass BarChart extends React.Component {\n  chartRef = React.createRef();\n\n  componentDidMount = () => {\n    this.props.horizontal ? this.renderHorizontalChart() : this.renderChart();\n  };\n  //Customize for customer satisfaction\n  renderHorizontalChart = () => {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: \"horizontalBar\",\n      data: {\n        labels: [\"5 stars\", \"4 stars\", \"3 stars\", \"2 stars\", \"1 star\"],\n        datasets: [\n          {\n            label: \"Percentage (%)\",\n            backgroundColor: [\n              \"#fecd51\",\n              \"#8e5ea2\",\n              \"#3cba9f\",\n              \"#e8c3b9\",\n              \"#ff5200\",\n            ],\n            data: generateRandomPercentageNumberArray(5),\n          },\n        ],\n      },\n      options: {\n        legend: { display: false },\n        title: {\n          display: true,\n          text: this.props.chartTitle,\n        },\n      },\n    });\n\n    // this.chartRef.current.style.backgroundColor = '#b5ead7'\n  };\n  //customize for 5-year-profit\n  renderChart = () => {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    new Chart(myChartRef, {\n      type: \"bar\",\n      data: {\n        labels: generateYearArray(SIZE),\n        datasets: [\n          {\n            label: \"dollar (thousand)\",\n            backgroundColor: [\n              \"#3e95cd\",\n              \"#8e5ea2\",\n              \"#3cba9f\",\n              \"#e8c3b9\",\n              \"#c45850\",\n            ],\n            data: generateRandomNumberArray(SIZE, 1000),\n          },\n        ],\n      },\n      options: {\n        legend: { display: false },\n        title: {\n          display: true,\n          text: this.props.chartTitle,\n        },\n        scales: {\n          xAxes: [{\n            gridLines: {\n                offsetGridLines: true\n            }\n        }]\n        },\n      },\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ marginTop: \"15px\" }}>\n        <h3 className=\"no-margin\">{this.props.text}</h3>\n        <canvas\n          className=\"gray-background round-radius\" \n          style={{ paddingBottom: \"15px\" }}\n          id=\"myChart\"\n          ref={this.chartRef}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}