{"ast":null,"code":"export default (() => {\n  return Math.floor(Math.random() * 100);\n});\nexport const generateRandomNumberArray = (size, scale = 1000) => {\n  if (size < 0) return new Error(\"invalid size\");\n  if (size === 1) return Math.floor(Math.random() * scale);else {\n    const randomNumberArray = [];\n\n    for (let i = 0; i < size; i++) randomNumberArray.push(Math.floor(Math.random() * scale));\n\n    return randomNumberArray;\n  }\n};\nexport const generateRandomPercentageNumberArray = size => {\n  if (size < 0) return new Error(\"invalid size\");\n  if (size === 1) return 100;else {\n    const randomPercentageNumberArray = [];\n    let randomPercentageNumber;\n    let left = 100;\n\n    while (randomPercentageNumberArray.length < size) {\n      randomPercentageNumber = Math.floor(Math.random() * left);\n      if (randomPercentageNumber > left) return new Error(\"calculation wrong\");\n      randomPercentageNumberArray.push(randomPercentageNumber);\n      left -= randomPercentageNumber;\n\n      if (randomPercentageNumberArray.length === size - 1) {\n        randomPercentageNumberArray.push(Math.round(left));\n        break;\n      }\n    }\n\n    return randomPercentageNumberArray;\n  }\n};","map":{"version":3,"sources":["/home/alexkimory/react-test/src/utils/generateRandomNumber.js"],"names":["Math","floor","random","generateRandomNumberArray","size","scale","Error","randomNumberArray","i","push","generateRandomPercentageNumberArray","randomPercentageNumberArray","randomPercentageNumber","left","length","round"],"mappings":"AAAA,gBAAe,MAAM;AACnB,SAAOA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAP;AACD,CAFD;AAIA,OAAO,MAAMC,yBAAyB,GAAG,CAACC,IAAD,EAAOC,KAAK,GAAG,IAAf,KAAwB;AAC/D,MAAID,IAAI,GAAG,CAAX,EAAc,OAAO,IAAIE,KAAJ,CAAU,cAAV,CAAP;AACd,MAAIF,IAAI,KAAK,CAAb,EAAgB,OAAOJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBG,KAA3B,CAAP,CAAhB,KACK;AACH,UAAME,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EACED,iBAAiB,CAACE,IAAlB,CAAuBT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBG,KAA3B,CAAvB;;AACF,WAAOE,iBAAP;AACD;AACF,CATM;AAWP,OAAO,MAAMG,mCAAmC,GAAIN,IAAD,IAAU;AAC3D,MAAIA,IAAI,GAAG,CAAX,EAAc,OAAO,IAAIE,KAAJ,CAAU,cAAV,CAAP;AACd,MAAIF,IAAI,KAAK,CAAb,EAAgB,OAAO,GAAP,CAAhB,KACK;AACH,UAAMO,2BAA2B,GAAG,EAApC;AACA,QAAIC,sBAAJ;AACA,QAAIC,IAAI,GAAG,GAAX;;AACA,WAAOF,2BAA2B,CAACG,MAA5B,GAAqCV,IAA5C,EAAkD;AAChDQ,MAAAA,sBAAsB,GAAGZ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcW,IAAzB,CAAzB;AAEA,UAAID,sBAAsB,GAAGC,IAA7B,EAAmC,OAAO,IAAIP,KAAJ,CAAU,mBAAV,CAAP;AACnCK,MAAAA,2BAA2B,CAACF,IAA5B,CAAiCG,sBAAjC;AACAC,MAAAA,IAAI,IAAID,sBAAR;;AAEA,UAAID,2BAA2B,CAACG,MAA5B,KAAuCV,IAAI,GAAG,CAAlD,EAAqD;AACnDO,QAAAA,2BAA2B,CAACF,IAA5B,CAAiCT,IAAI,CAACe,KAAL,CAAWF,IAAX,CAAjC;AACA;AACD;AACF;;AAED,WAAOF,2BAAP;AACD;AACF,CAtBM","sourcesContent":["export default () => {\n  return Math.floor(Math.random() * 100);\n};\n\nexport const generateRandomNumberArray = (size, scale = 1000) => {\n  if (size < 0) return new Error(\"invalid size\");\n  if (size === 1) return Math.floor(Math.random() * scale);\n  else {\n    const randomNumberArray = [];\n    for (let i = 0; i < size; i++)\n      randomNumberArray.push(Math.floor(Math.random() * scale));\n    return randomNumberArray;\n  }\n};\n\nexport const generateRandomPercentageNumberArray = (size) => {\n  if (size < 0) return new Error(\"invalid size\");\n  if (size === 1) return 100;\n  else {\n    const randomPercentageNumberArray = [];\n    let randomPercentageNumber;\n    let left = 100;\n    while (randomPercentageNumberArray.length < size) {\n      randomPercentageNumber = Math.floor(Math.random()*left);\n\n      if (randomPercentageNumber > left) return new Error(\"calculation wrong\");\n      randomPercentageNumberArray.push(randomPercentageNumber);\n      left -= randomPercentageNumber;\n\n      if (randomPercentageNumberArray.length === size - 1) {\n        randomPercentageNumberArray.push(Math.round(left));\n        break;\n      }\n    }\n\n    return randomPercentageNumberArray;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}