{"ast":null,"code":"var _jsxFileName = \"/home/alexkimory/react-test/src/components/section/charts/TimeSerie.js\";\nimport React from 'react';\nimport { Chart } from 'chart.js';\n\nclass TimeSerie extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.updateTimeSerieEveryXSeconds = () => {\n      setInterval(() => {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n            //Bring in data\n            datasets: [{\n              borderColor: 'red',\n              showLine: true,\n              fill: false,\n              label: \"Customer in store\",\n              data: [86, 67, 91, 92, 103]\n            }]\n          },\n          options: {\n            scales: {\n              yAxes: [{\n                stacked: true\n              }]\n            }\n          }\n        });\n      }, 2000);\n    };\n  }\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        // labels: [\"Jan\", \"Feb\", \"March\"],\n        datasets: [{\n          borderColor: 'red',\n          showLine: true,\n          fill: false,\n          label: \"Customer in store\",\n          data: [{\n            x: 10,\n            y: 20\n          }, {\n            x: 15,\n            y: 10\n          }, {\n            x: 45,\n            y: 10\n          }]\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default TimeSerie;","map":{"version":3,"sources":["/home/alexkimory/react-test/src/components/section/charts/TimeSerie.js"],"names":["React","Chart","TimeSerie","Component","chartRef","createRef","updateTimeSerieEveryXSeconds","setInterval","myChartRef","current","getContext","type","data","datasets","borderColor","showLine","fill","label","options","scales","yAxes","stacked","componentDidMount","x","y","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,UAApB;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCC,QADoC,GACzBJ,KAAK,CAACK,SAAN,EADyB;;AAAA,SAsCpCC,4BAtCoC,GAsCL,MAAM;AACjCC,MAAAA,WAAW,CAAC,MAAM;AACd,cAAMC,UAAU,GAAG,KAAKJ,QAAL,CAAcK,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEJ,YAAIT,KAAJ,CAAUO,UAAV,EAAsB;AAClBG,UAAAA,IAAI,EAAE,MADY;AAElBC,UAAAA,IAAI,EAAE;AACF;AAEAC,YAAAA,QAAQ,EAAE,CACN;AACIC,cAAAA,WAAW,EAAE,KADjB;AAEIC,cAAAA,QAAQ,EAAE,IAFd;AAGIC,cAAAA,IAAI,EAAC,KAHT;AAIIC,cAAAA,KAAK,EAAE,mBAJX;AAKIL,cAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,GAAjB;AALV,aADM;AAHR,WAFY;AAelBM,UAAAA,OAAO,EAAE;AACLC,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAE,CAAC;AACJC,gBAAAA,OAAO,EAAE;AADL,eAAD;AADH;AADH;AAfS,SAAtB;AAuBC,OA1BU,EA0BR,IA1BQ,CAAX;AA2BH,KAlEmC;AAAA;;AAGpCC,EAAAA,iBAAiB,GAAG;AAChB,UAAMd,UAAU,GAAG,KAAKJ,QAAL,CAAcK,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,QAAIT,KAAJ,CAAUO,UAAV,EAAsB;AAClBG,MAAAA,IAAI,EAAE,MADY;AAElBC,MAAAA,IAAI,EAAE;AACF;AACA;AACAC,QAAAA,QAAQ,EAAE,CACN;AACIC,UAAAA,WAAW,EAAE,KADjB;AAEIC,UAAAA,QAAQ,EAAE,IAFd;AAGIC,UAAAA,IAAI,EAAC,KAHT;AAIIC,UAAAA,KAAK,EAAE,mBAJX;AAKIL,UAAAA,IAAI,EAAE,CAAC;AACHW,YAAAA,CAAC,EAAE,EADA;AAEHC,YAAAA,CAAC,EAAE;AAFA,WAAD,EAGH;AACCD,YAAAA,CAAC,EAAE,EADJ;AAECC,YAAAA,CAAC,EAAE;AAFJ,WAHG,EAMH;AAACD,YAAAA,CAAC,EAAE,EAAJ;AACCC,YAAAA,CAAC,EAAE;AADJ,WANG;AALV,SADM;AAHR,OAFY;AAsBlBN,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,OAAO,EAAE;AADL,WAAD;AADH;AADH;AAtBS,KAAtB;AA8BH;;AAgCDI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,GAAG,EAAE,KAAKrB,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AASH;;AA9EmC;;AAiFxC,eAAeF,SAAf","sourcesContent":["import React from 'react';\nimport {Chart} from 'chart.js';\n\nclass TimeSerie extends React.Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        \n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                // labels: [\"Jan\", \"Feb\", \"March\"],\n                datasets: [\n                    {\n                        borderColor: 'red',\n                        showLine: true,\n                        fill:false,\n                        label: \"Customer in store\",\n                        data: [{\n                            x: 10,\n                            y: 20\n                        }, {\n                            x: 15,\n                            y: 10\n                        }, {x: 45,\n                            y: 10}]\n                    }\n                ]\n            },\n            options: {\n                scales: {\n                    yAxes: [{\n                        stacked: true\n                    }]\n                }\n            }\n        });\n    }\n\n    updateTimeSerieEveryXSeconds = () => {\n        setInterval(() => {\n            const myChartRef = this.chartRef.current.getContext(\"2d\");\n        \n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n\n                datasets: [\n                    {\n                        borderColor: 'red',\n                        showLine: true,\n                        fill:false,\n                        label: \"Customer in store\",\n                        data: [86, 67, 91, 92, 103],\n                    }\n                ]\n            },\n            options: {\n                scales: {\n                    yAxes: [{\n                        stacked: true\n                    }]\n                }\n            }\n        });\n        }, 2000)\n    }\n\n    render() {\n        return (\n            <div>\n\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TimeSerie;\n"]},"metadata":{},"sourceType":"module"}