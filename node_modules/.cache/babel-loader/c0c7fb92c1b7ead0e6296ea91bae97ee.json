{"ast":null,"code":"var _jsxFileName = \"/home/alexkimory/react-test/src/components/section/charts/TimeSerie.js\";\nimport React from \"react\";\nimport { Chart } from \"chart.js\";\n\nclass TimeSerie extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n    this.state = {\n      data: [],\n      labels: []\n    };\n\n    this.updateTimeSerieEveryXSeconds = () => {\n      setInterval(() => {\n        let newData = Math.floor(Math.random() * 100);\n        let newDatArray = [...this.state.data, newData];\n        this.setState({\n          data: newDatArray\n        });\n        let newLabel = new Date();\n        let hour = newLabel.getHours();\n        let minute = newLabel.getMinutes();\n        let second = newLabel.getSeconds();\n        let label = `${hour}: ${minute}: ${second}`;\n        let newLabelArray = [...this.state.labels, label];\n        this.setState({\n          labels: newLabelArray\n        });\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n            //Bring in data\n            labels: this.state.labels,\n            datasets: [{\n              borderColor: \"red\",\n              showLine: true,\n              fill: false,\n              label: \"Customer in store\",\n              data: this.state.data\n            }]\n          },\n          options: {\n            scales: {\n              yAxes: [{\n                stacked: true,\n                ticks: {\n                  suggestedMin: 0,\n                  suggestedMax: 100,\n                  maxTicksLimit: 5,\n                  beginAtZero: true,\n                  stepSize: 0.5\n                }\n              }],\n              xAxes: []\n            }\n          }\n        });\n      }, 5000);\n    };\n  }\n\n  componentDidMount() {\n    this.updateTimeSerieEveryXSeconds();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, \"Number of customer in store every 5 seconds\", /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default TimeSerie;","map":{"version":3,"sources":["/home/alexkimory/react-test/src/components/section/charts/TimeSerie.js"],"names":["React","Chart","TimeSerie","Component","chartRef","createRef","state","data","labels","updateTimeSerieEveryXSeconds","setInterval","newData","Math","floor","random","newDatArray","setState","newLabel","Date","hour","getHours","minute","getMinutes","second","getSeconds","label","newLabelArray","myChartRef","current","getContext","type","datasets","borderColor","showLine","fill","options","scales","yAxes","stacked","ticks","suggestedMin","suggestedMax","maxTicksLimit","beginAtZero","stepSize","xAxes","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,QADsC,GAC3BJ,KAAK,CAACK,SAAN,EAD2B;AAAA,SAEtCC,KAFsC,GAE9B;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,MAAM,EAAE;AAFF,KAF8B;;AAAA,SAUtCC,4BAVsC,GAUP,MAAM;AACnCC,MAAAA,WAAW,CAAC,MAAM;AAChB,YAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAd;AACA,YAAIC,WAAW,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWC,IAAf,EAAqBI,OAArB,CAAlB;AACA,aAAKK,QAAL,CAAc;AAAET,UAAAA,IAAI,EAAEQ;AAAR,SAAd;AAEA,YAAIE,QAAQ,GAAG,IAAIC,IAAJ,EAAf;AACA,YAAIC,IAAI,GAAGF,QAAQ,CAACG,QAAT,EAAX;AACA,YAAIC,MAAM,GAAGJ,QAAQ,CAACK,UAAT,EAAb;AACA,YAAIC,MAAM,GAAGN,QAAQ,CAACO,UAAT,EAAb;AACA,YAAIC,KAAK,GAAI,GAAEN,IAAK,KAAIE,MAAO,KAAIE,MAAO,EAA1C;AAEA,YAAIG,aAAa,GAAG,CAAC,GAAG,KAAKpB,KAAL,CAAWE,MAAf,EAAuBiB,KAAvB,CAApB;AACA,aAAKT,QAAL,CAAc;AAAER,UAAAA,MAAM,EAAEkB;AAAV,SAAd;AAEA,cAAMC,UAAU,GAAG,KAAKvB,QAAL,CAAcwB,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,YAAI5B,KAAJ,CAAU0B,UAAV,EAAsB;AACpBG,UAAAA,IAAI,EAAE,MADc;AAEpBvB,UAAAA,IAAI,EAAE;AACJ;AACAC,YAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAFf;AAGJuB,YAAAA,QAAQ,EAAE,CACR;AACEC,cAAAA,WAAW,EAAE,KADf;AAEEC,cAAAA,QAAQ,EAAE,IAFZ;AAGEC,cAAAA,IAAI,EAAE,KAHR;AAIET,cAAAA,KAAK,EAAE,mBAJT;AAKElB,cAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AALnB,aADQ;AAHN,WAFc;AAepB4B,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE;AACNC,cAAAA,KAAK,EAAE,CACL;AACEC,gBAAAA,OAAO,EAAE,IADX;AAEEC,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,YAAY,EAAE,CADT;AAELC,kBAAAA,YAAY,EAAE,GAFT;AAGLC,kBAAAA,aAAa,EAAE,CAHV;AAILC,kBAAAA,WAAW,EAAE,IAJR;AAKLC,kBAAAA,QAAQ,EAAE;AALL;AAFT,eADK,CADD;AAaNC,cAAAA,KAAK,EAAE;AAbD;AADD;AAfW,SAAtB;AAiCD,OAjDU,EAiDR,IAjDQ,CAAX;AAkDD,KA7DqC;AAAA;;AAMtCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKrC,4BAAL;AACD;;AAuDDsC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAEE;AAAQ,MAAA,EAAE,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAE,KAAK3C,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAtEqC;;AAyExC,eAAeF,SAAf","sourcesContent":["import React from \"react\";\nimport { Chart } from \"chart.js\";\n\nclass TimeSerie extends React.Component {\n  chartRef = React.createRef();\n  state = {\n    data: [],\n    labels: [],\n  };\n  componentDidMount() {\n    this.updateTimeSerieEveryXSeconds();\n  }\n\n  updateTimeSerieEveryXSeconds = () => {\n    setInterval(() => {\n      let newData = Math.floor(Math.random() * 100);\n      let newDatArray = [...this.state.data, newData];\n      this.setState({ data: newDatArray });\n\n      let newLabel = new Date();\n      let hour = newLabel.getHours();\n      let minute = newLabel.getMinutes();\n      let second = newLabel.getSeconds();\n      let label = `${hour}: ${minute}: ${second}`;\n\n      let newLabelArray = [...this.state.labels, label];\n      this.setState({ labels: newLabelArray });\n\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          //Bring in data\n          labels: this.state.labels,\n          datasets: [\n            {\n              borderColor: \"red\",\n              showLine: true,\n              fill: false,\n              label: \"Customer in store\",\n              data: this.state.data,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            yAxes: [\n              {\n                stacked: true,\n                ticks: {\n                  suggestedMin: 0,\n                  suggestedMax: 100,\n                  maxTicksLimit: 5,\n                  beginAtZero: true,\n                  stepSize: 0.5,\n                },\n              },\n            ],\n            xAxes: [],\n          },\n        },\n      });\n    }, 5000);\n  };\n\n  render() {\n    return (\n      <div>\n          Number of customer in store every 5 seconds\n        <canvas id=\"myChart\" ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n\nexport default TimeSerie;\n"]},"metadata":{},"sourceType":"module"}