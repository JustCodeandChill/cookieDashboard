{"ast":null,"code":"var _jsxFileName = \"/home/alexkimory/react-test/src/components/section/charts/Doughnut.js\";\nimport React from \"react\";\nimport { Chart } from \"chart.js\";\n\nclass DoughnutChart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.updateTimeSerieEveryXSeconds = () => {\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          labels: [1, 2, 3],\n          datasets: [{\n            borderColor: \"red\",\n            showLine: true,\n            fill: false,\n            label: \"Customer in store\",\n            data: [1, 2, 3]\n          }]\n        },\n        options: {\n          scales: {\n            yAxes: [{\n              stacked: true,\n              ticks: {\n                suggestedMin: 0,\n                suggestedMax: 100,\n                maxTicksLimit: 5,\n                beginAtZero: true,\n                stepSize: 0.5\n              }\n            }],\n            xAxes: []\n          }\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.updateTimeSerieEveryXSeconds();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Number of customer in store every \", TIME_REPEAT, \" seconds\"), /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default DoughnutChart;","map":{"version":3,"sources":["/home/alexkimory/react-test/src/components/section/charts/Doughnut.js"],"names":["React","Chart","DoughnutChart","Component","chartRef","createRef","updateTimeSerieEveryXSeconds","myChartRef","current","getContext","type","data","labels","datasets","borderColor","showLine","fill","label","options","scales","yAxes","stacked","ticks","suggestedMin","suggestedMax","maxTicksLimit","beginAtZero","stepSize","xAxes","componentDidMount","render","TIME_REPEAT"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAEA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAAA;AAAA;AAAA,SAC1CC,QAD0C,GAC/BJ,KAAK,CAACK,SAAN,EAD+B;;AAAA,SAO1CC,4BAP0C,GAOX,MAAM;AACnC,YAAMC,UAAU,GAAG,KAAKH,QAAL,CAAcI,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,UAAIR,KAAJ,CAAUM,UAAV,EAAsB;AACpBG,QAAAA,IAAI,EAAE,MADc;AAEpBC,QAAAA,IAAI,EAAE;AACJC,UAAAA,MAAM,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADJ;AAEJC,UAAAA,QAAQ,EAAE,CACR;AACEC,YAAAA,WAAW,EAAE,KADf;AAEEC,YAAAA,QAAQ,EAAE,IAFZ;AAGEC,YAAAA,IAAI,EAAE,KAHR;AAIEC,YAAAA,KAAK,EAAE,mBAJT;AAKEN,YAAAA,IAAI,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL;AALR,WADQ;AAFN,SAFc;AAcpBO,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE,CACL;AACEC,cAAAA,OAAO,EAAE,IADX;AAEEC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,YAAY,EAAE,CADT;AAELC,gBAAAA,YAAY,EAAE,GAFT;AAGLC,gBAAAA,aAAa,EAAE,CAHV;AAILC,gBAAAA,WAAW,EAAE,IAJR;AAKLC,gBAAAA,QAAQ,EAAE;AALL;AAFT,aADK,CADD;AAaNC,YAAAA,KAAK,EAAE;AAbD;AADD;AAdW,OAAtB;AAgCD,KA1CyC;AAAA;;AAG1CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKvB,4BAAL;AACD;;AAuCDwB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAuCC,WAAvC,aADF,eAEE;AAAQ,MAAA,EAAE,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAE,KAAK3B,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAnDyC;;AAsD5C,eAAeF,aAAf","sourcesContent":["import React from \"react\";\nimport { Chart } from \"chart.js\";\n\nclass DoughnutChart extends React.Component {\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    this.updateTimeSerieEveryXSeconds();\n  }\n\n  updateTimeSerieEveryXSeconds = () => {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        labels: [1,2,3],\n        datasets: [\n          {\n            borderColor: \"red\",\n            showLine: true,\n            fill: false,\n            label: \"Customer in store\",\n            data: [1,2,3]\n          },\n        ],\n      },\n      options: {\n        scales: {\n          yAxes: [\n            {\n              stacked: true,\n              ticks: {\n                suggestedMin: 0,\n                suggestedMax: 100,\n                maxTicksLimit: 5,\n                beginAtZero: true,\n                stepSize: 0.5,\n              },\n            },\n          ],\n          xAxes: [],\n        },\n      },\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h5>Number of customer in store every {TIME_REPEAT} seconds</h5>\n        <canvas id=\"myChart\" ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n\nexport default DoughnutChart;\n"]},"metadata":{},"sourceType":"module"}