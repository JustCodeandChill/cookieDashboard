{"ast":null,"code":"var _jsxFileName = \"/home/alexkimory/react-test/src/components/section/charts/TimeSerie.js\";\nimport React from \"react\";\nimport { Chart } from \"chart.js\";\n\nclass TimeSerie extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n    this.state = {\n      data: [],\n      labels: []\n    };\n\n    this.updateTimeSerieEveryXSeconds = () => {\n      setInterval(() => {\n        let newData = Math.floor(Math.random() * 50);\n        let newDatArray = [...this.state.data, newData];\n        this.setState({\n          data: newDatArray\n        });\n        let newLabel = Math.floor(Math.random() * 10);\n        let newLabelArray = [...this.state.labels, newLabel];\n        this.setState({\n          labels: newLabelArray\n        });\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n            //Bring in data\n            labels: this.state.labels,\n            datasets: [{\n              borderColor: \"red\",\n              showLine: true,\n              fill: false,\n              label: \"Customer in store\",\n              data: this.state.data\n            }]\n          },\n          options: {\n            scales: {\n              yAxes: [{\n                stacked: true,\n                ticks: {\n                  suggestedMin: 0,\n                  suggestedMax: 100\n                },\n                beginAtZero: true\n              }]\n            }\n          }\n        });\n      }, 2000);\n    };\n  }\n\n  componentDidMount() {\n    // const myChartRef = this.chartRef.current.getContext(\"2d\");\n    // new Chart(myChartRef, {\n    //   type: \"line\",\n    //   data: {\n    //     //Bring in data\n    //     labels: [\"Jan\", \"Feb\", \"March\"],\n    //     datasets: [\n    //       {\n    //         borderColor: \"red\",\n    //         showLine: true,\n    //         fill: false,\n    //         label: \"Customer in store\",\n    //         data: [\n    //           {\n    //             x: 10,\n    //             y: 20,\n    //           },\n    //           {\n    //             x: 15,\n    //             y: 10,\n    //           },\n    //           { x: 40, y: 60 },\n    //           { x: 20, y: 70 },\n    //         ],\n    //       },\n    //     ],\n    //   },\n    //   options: {\n    //     scales: {\n    //       yAxes: [\n    //         {\n    //           stacked: true,\n    //           ticks: {\n    //             suggestedMin: 0,\n    //             suggestedMax: 100,\n    //           },\n    //         },\n    //       ],\n    //     },\n    //   },\n    // });\n    this.updateTimeSerieEveryXSeconds();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default TimeSerie;","map":{"version":3,"sources":["/home/alexkimory/react-test/src/components/section/charts/TimeSerie.js"],"names":["React","Chart","TimeSerie","Component","chartRef","createRef","state","data","labels","updateTimeSerieEveryXSeconds","setInterval","newData","Math","floor","random","newDatArray","setState","newLabel","newLabelArray","myChartRef","current","getContext","type","datasets","borderColor","showLine","fill","label","options","scales","yAxes","stacked","ticks","suggestedMin","suggestedMax","beginAtZero","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACtCC,QADsC,GAC3BJ,KAAK,CAACK,SAAN,EAD2B;AAAA,SAEpCC,KAFoC,GAE5B;AACJC,MAAAA,IAAI,EAAG,EADH;AAEJC,MAAAA,MAAM,EAAG;AAFL,KAF4B;;AAAA,SAqDtCC,4BArDsC,GAqDP,MAAM;AACnCC,MAAAA,WAAW,CAAC,MAAM;AACd,YAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAd;AACA,YAAIC,WAAW,GAAG,CAAC,GAAG,KAAKT,KAAL,CAAWC,IAAf,EAAqBI,OAArB,CAAlB;AACA,aAAKK,QAAL,CAAc;AAAET,UAAAA,IAAI,EAAGQ;AAAT,SAAd;AAEA,YAAIE,QAAQ,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAf;AACA,YAAII,aAAa,GAAG,CAAC,GAAG,KAAKZ,KAAL,CAAWE,MAAf,EAAuBS,QAAvB,CAApB;AACA,aAAKD,QAAL,CAAc;AAAER,UAAAA,MAAM,EAAGU;AAAX,SAAd;AAEF,cAAMC,UAAU,GAAG,KAAKf,QAAL,CAAcgB,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,YAAIpB,KAAJ,CAAUkB,UAAV,EAAsB;AACpBG,UAAAA,IAAI,EAAE,MADc;AAEpBf,UAAAA,IAAI,EAAE;AACJ;AACAC,YAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAFf;AAGJe,YAAAA,QAAQ,EAAE,CACR;AACEC,cAAAA,WAAW,EAAE,KADf;AAEEC,cAAAA,QAAQ,EAAE,IAFZ;AAGEC,cAAAA,IAAI,EAAE,KAHR;AAIEC,cAAAA,KAAK,EAAE,mBAJT;AAKEpB,cAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AALnB,aADQ;AAHN,WAFc;AAepBqB,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE;AACNC,cAAAA,KAAK,EAAE,CACL;AACEC,gBAAAA,OAAO,EAAE,IADX;AAEEC,gBAAAA,KAAK,EAAE;AACHC,kBAAAA,YAAY,EAAE,CADX;AAEHC,kBAAAA,YAAY,EAAE;AAFX,iBAFT;AAMIC,gBAAAA,WAAW,EAAE;AANjB,eADK;AADD;AADD;AAfW,SAAtB;AA8BD,OAzCU,EAyCR,IAzCQ,CAAX;AA0CD,KAhGqC;AAAA;;AAMtCC,EAAAA,iBAAiB,GAAG;AAClB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAK3B,4BAAL;AACD;;AA+CD4B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,EAAE,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAE,KAAKjC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAxGqC;;AA2GxC,eAAeF,SAAf","sourcesContent":["import React from \"react\";\nimport { Chart } from \"chart.js\";\n\nclass TimeSerie extends React.Component {\n  chartRef = React.createRef();\n    state = {\n        data : [],\n        labels : []\n    }\n  componentDidMount() {\n    // const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    // new Chart(myChartRef, {\n    //   type: \"line\",\n    //   data: {\n    //     //Bring in data\n    //     labels: [\"Jan\", \"Feb\", \"March\"],\n    //     datasets: [\n    //       {\n    //         borderColor: \"red\",\n    //         showLine: true,\n    //         fill: false,\n    //         label: \"Customer in store\",\n    //         data: [\n    //           {\n    //             x: 10,\n    //             y: 20,\n    //           },\n    //           {\n    //             x: 15,\n    //             y: 10,\n    //           },\n    //           { x: 40, y: 60 },\n    //           { x: 20, y: 70 },\n    //         ],\n    //       },\n    //     ],\n    //   },\n    //   options: {\n    //     scales: {\n    //       yAxes: [\n    //         {\n    //           stacked: true,\n    //           ticks: {\n    //             suggestedMin: 0,\n    //             suggestedMax: 100,\n    //           },\n    //         },\n    //       ],\n    //     },\n    //   },\n    // });\n\n    this.updateTimeSerieEveryXSeconds();\n  }\n\n  updateTimeSerieEveryXSeconds = () => {\n    setInterval(() => {\n        let newData = Math.floor(Math.random()*50);\n        let newDatArray = [...this.state.data, newData]\n        this.setState({ data : newDatArray});\n\n        let newLabel = Math.floor(Math.random()*10);\n        let newLabelArray = [...this.state.labels, newLabel]\n        this.setState({ labels : newLabelArray});\n\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n        \n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          //Bring in data\n          labels: this.state.labels,\n          datasets: [\n            {\n              borderColor: \"red\",\n              showLine: true,\n              fill: false,\n              label: \"Customer in store\",\n              data: this.state.data,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            yAxes: [\n              {\n                stacked: true,\n                ticks: {\n                    suggestedMin: 0,\n                    suggestedMax: 100,\n                  },\n                  beginAtZero: true\n              },\n            ],\n          },\n        },\n      });\n    }, 2000);\n  };\n\n  render() {\n    return (\n      <div>\n        <canvas id=\"myChart\" ref={this.chartRef} />\n      </div>\n    );\n  }\n}\n\nexport default TimeSerie;\n"]},"metadata":{},"sourceType":"module"}