{"ast":null,"code":"import _toConsumableArray from\"/home/alexkimory/react-dashboard/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/home/alexkimory/react-dashboard/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/alexkimory/react-dashboard/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/home/alexkimory/react-dashboard/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/home/alexkimory/react-dashboard/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from\"react\";import{Chart}from\"chart.js\";import generateCurrentTime from\"../../../utils/generateCurrentTime\";import generateRandomNumber from\"../../../utils/generateRandomNumber\";var TIME_REPEAT=5;var TimeSerie=/*#__PURE__*/function(_React$Component){_inherits(TimeSerie,_React$Component);var _super=_createSuper(TimeSerie);function TimeSerie(){var _this;_classCallCheck(this,TimeSerie);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.chartRef=React.createRef();_this.state={data:[],labels:[]};_this.limitSizeOfStateData=function(size){if(_this.state.data.lengh>size){var reducedSize=_this.state.data.lengh-size;var data=_this.state.data.slice(reducedSize);_this.setState({data:data});}if(_this.state.labels.length>size){var _reducedSize=_this.state.labels.length-size;var labels=_this.state.labels.slice(_reducedSize);_this.setState({labels:labels});}};_this.updateTimeSerieEveryXSeconds=function(second){setInterval(function(){_this.limitSizeOfStateData(7);//update y axis with abitrary number of customer\n_this.setState({data:[].concat(_toConsumableArray(_this.state.data),[generateRandomNumber()])});//update x axis with current time hour:minute:second\n_this.setState({labels:[].concat(_toConsumableArray(_this.state.labels),[generateCurrentTime()])});//create chart and update it every X seconds\nvar myChartRef=_this.chartRef.current.getContext(\"2d\");new Chart(myChartRef,{type:\"line\",data:{labels:_this.state.labels,datasets:[{borderColor:\"green\",showLine:true,fill:false,label:\"Customer in store\",data:_this.state.data}]},options:{scales:{yAxes:[{stacked:true,ticks:{suggestedMin:0,suggestedMax:100,maxTicksLimit:5,beginAtZero:true,stepSize:0.5}}],xAxes:[]}}});},second*1000);_this.chartRef.current.style.height='30vh';};return _this;}_createClass(TimeSerie,[{key:\"componentDidMount\",value:function componentDidMount(){this.updateTimeSerieEveryXSeconds(TIME_REPEAT);}// keep the time serie clear and has only lmited amount of points \n},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{style:{marginBottom:'30px'}},/*#__PURE__*/React.createElement(\"h3\",{className:\"no-margin\"},\"Number of customer in store every \",TIME_REPEAT,\" seconds\"),/*#__PURE__*/React.createElement(\"div\",{className:\"gray-background round-radius\"},/*#__PURE__*/React.createElement(\"canvas\",{height:this.props.height,style:{padding:'0 0 5px 0'},id:\"myChart\",ref:this.chartRef})));}}]);return TimeSerie;}(React.Component);export default TimeSerie;","map":{"version":3,"sources":["/home/alexkimory/react-dashboard/client/src/components/section/charts/TimeSerie.js"],"names":["React","Chart","generateCurrentTime","generateRandomNumber","TIME_REPEAT","TimeSerie","chartRef","createRef","state","data","labels","limitSizeOfStateData","size","lengh","reducedSize","slice","setState","length","updateTimeSerieEveryXSeconds","second","setInterval","myChartRef","current","getContext","type","datasets","borderColor","showLine","fill","label","options","scales","yAxes","stacked","ticks","suggestedMin","suggestedMax","maxTicksLimit","beginAtZero","stepSize","xAxes","style","height","marginBottom","props","padding","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Chart } from \"chart.js\";\nimport generateCurrentTime from \"../../../utils/generateCurrentTime\";\nimport generateRandomNumber from \"../../../utils/generateRandomNumber\";\n\nconst TIME_REPEAT = 5;\nclass TimeSerie extends React.Component {\n  chartRef = React.createRef();\n  state = {\n    data: [],\n    labels: [],\n  };\n  componentDidMount() {\n    this.updateTimeSerieEveryXSeconds(TIME_REPEAT);\n  }\n  // keep the time serie clear and has only lmited amount of points \n  limitSizeOfStateData = (size) => {\n    if (this.state.data.lengh > size) {\n      let reducedSize = this.state.data.lengh - size;\n      let data = this.state.data.slice(reducedSize);\n      this.setState({data : data});\n    }\n\n    if (this.state.labels.length > size) {\n      let reducedSize = this.state.labels.length - size;\n      let labels = this.state.labels.slice(reducedSize);\n      this.setState({labels : labels});\n    }\n  }\n  updateTimeSerieEveryXSeconds = (second) => {\n    setInterval(() => {\n      this.limitSizeOfStateData(7);\n      //update y axis with abitrary number of customer\n      this.setState({ data: [...this.state.data, generateRandomNumber()] });\n\n      //update x axis with current time hour:minute:second\n      this.setState({ labels: [...this.state.labels, generateCurrentTime()] });\n\n      //create chart and update it every X seconds\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          labels: this.state.labels,\n          datasets: [\n            {\n              borderColor: \"green\",\n              showLine: true,\n              fill: false,\n              label: \"Customer in store\",\n              data: this.state.data,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            yAxes: [\n              {\n                stacked: true,\n                ticks: {\n                  suggestedMin: 0,\n                  suggestedMax: 100,\n                  maxTicksLimit: 5,\n                  beginAtZero: true,\n                  stepSize: 0.5,\n                },\n              },\n            ],\n            xAxes: [],\n          },\n        },\n      });\n    }, second * 1000);\n\n    this.chartRef.current.style.height = '30vh'\n  };\n\n  render() {\n    return (\n      <div style={{marginBottom:'30px'}}>\n        <h3 className=\"no-margin\">Number of customer in store every {TIME_REPEAT} seconds</h3>\n        <div className=\"gray-background round-radius\">\n            <canvas height={this.props.height} style={{padding:'0 0 5px 0'}} id=\"myChart\" ref={this.chartRef} />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default TimeSerie;\n"]},"metadata":{},"sourceType":"module"}